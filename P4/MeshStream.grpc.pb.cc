// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MeshStream.proto

#include "MeshStream.pb.h"
#include "MeshStream.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* MeshStream_method_names[] = {
  "/MeshStream/ValidateMesh",
  "/MeshStream/StreamMesh",
};

std::unique_ptr< MeshStream::Stub> MeshStream::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MeshStream::Stub> stub(new MeshStream::Stub(channel, options));
  return stub;
}

MeshStream::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ValidateMesh_(MeshStream_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamMesh_(MeshStream_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MeshStream::Stub::ValidateMesh(::grpc::ClientContext* context, const ::ValidationRequest& request, ::ValidationReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ValidationRequest, ::ValidationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateMesh_, context, request, response);
}

void MeshStream::Stub::async::ValidateMesh(::grpc::ClientContext* context, const ::ValidationRequest* request, ::ValidationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ValidationRequest, ::ValidationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateMesh_, context, request, response, std::move(f));
}

void MeshStream::Stub::async::ValidateMesh(::grpc::ClientContext* context, const ::ValidationRequest* request, ::ValidationReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateMesh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ValidationReply>* MeshStream::Stub::PrepareAsyncValidateMeshRaw(::grpc::ClientContext* context, const ::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ValidationReply, ::ValidationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateMesh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ValidationReply>* MeshStream::Stub::AsyncValidateMeshRaw(::grpc::ClientContext* context, const ::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateMeshRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MeshStream::Stub::StreamMesh(::grpc::ClientContext* context, const ::MeshRequest& request, ::MeshReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MeshRequest, ::MeshReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StreamMesh_, context, request, response);
}

void MeshStream::Stub::async::StreamMesh(::grpc::ClientContext* context, const ::MeshRequest* request, ::MeshReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MeshRequest, ::MeshReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StreamMesh_, context, request, response, std::move(f));
}

void MeshStream::Stub::async::StreamMesh(::grpc::ClientContext* context, const ::MeshRequest* request, ::MeshReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StreamMesh_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MeshReply>* MeshStream::Stub::PrepareAsyncStreamMeshRaw(::grpc::ClientContext* context, const ::MeshRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MeshReply, ::MeshRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StreamMesh_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MeshReply>* MeshStream::Stub::AsyncStreamMeshRaw(::grpc::ClientContext* context, const ::MeshRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStreamMeshRaw(context, request, cq);
  result->StartCall();
  return result;
}

MeshStream::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeshStream_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeshStream::Service, ::ValidationRequest, ::ValidationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeshStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ValidationRequest* req,
             ::ValidationReply* resp) {
               return service->ValidateMesh(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MeshStream_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MeshStream::Service, ::MeshRequest, ::MeshReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MeshStream::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MeshRequest* req,
             ::MeshReply* resp) {
               return service->StreamMesh(ctx, req, resp);
             }, this)));
}

MeshStream::Service::~Service() {
}

::grpc::Status MeshStream::Service::ValidateMesh(::grpc::ServerContext* context, const ::ValidationRequest* request, ::ValidationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MeshStream::Service::StreamMesh(::grpc::ServerContext* context, const ::MeshRequest* request, ::MeshReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


