// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: SceneLoad.proto

#include "SceneLoad.pb.h"
#include "SceneLoad.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* SceneLoad_method_names[] = {
  "/SceneLoad/ValidateScene",
  "/SceneLoad/LoadScene",
};

std::unique_ptr< SceneLoad::Stub> SceneLoad::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SceneLoad::Stub> stub(new SceneLoad::Stub(channel, options));
  return stub;
}

SceneLoad::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ValidateScene_(SceneLoad_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadScene_(SceneLoad_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SceneLoad::Stub::ValidateScene(::grpc::ClientContext* context, const ::ValidationRequest& request, ::ValidationReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ValidationRequest, ::ValidationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateScene_, context, request, response);
}

void SceneLoad::Stub::async::ValidateScene(::grpc::ClientContext* context, const ::ValidationRequest* request, ::ValidationReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ValidationRequest, ::ValidationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateScene_, context, request, response, std::move(f));
}

void SceneLoad::Stub::async::ValidateScene(::grpc::ClientContext* context, const ::ValidationRequest* request, ::ValidationReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ValidationReply>* SceneLoad::Stub::PrepareAsyncValidateSceneRaw(::grpc::ClientContext* context, const ::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ValidationReply, ::ValidationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ValidationReply>* SceneLoad::Stub::AsyncValidateSceneRaw(::grpc::ClientContext* context, const ::ValidationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SceneLoad::Stub::LoadScene(::grpc::ClientContext* context, const ::SceneRequest& request, ::SceneReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SceneRequest, ::SceneReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadScene_, context, request, response);
}

void SceneLoad::Stub::async::LoadScene(::grpc::ClientContext* context, const ::SceneRequest* request, ::SceneReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SceneRequest, ::SceneReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadScene_, context, request, response, std::move(f));
}

void SceneLoad::Stub::async::LoadScene(::grpc::ClientContext* context, const ::SceneRequest* request, ::SceneReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadScene_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SceneReply>* SceneLoad::Stub::PrepareAsyncLoadSceneRaw(::grpc::ClientContext* context, const ::SceneRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SceneReply, ::SceneRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadScene_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SceneReply>* SceneLoad::Stub::AsyncLoadSceneRaw(::grpc::ClientContext* context, const ::SceneRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadSceneRaw(context, request, cq);
  result->StartCall();
  return result;
}

SceneLoad::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneLoad_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SceneLoad::Service, ::ValidationRequest, ::ValidationReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SceneLoad::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ValidationRequest* req,
             ::ValidationReply* resp) {
               return service->ValidateScene(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SceneLoad_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SceneLoad::Service, ::SceneRequest, ::SceneReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SceneLoad::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SceneRequest* req,
             ::SceneReply* resp) {
               return service->LoadScene(ctx, req, resp);
             }, this)));
}

SceneLoad::Service::~Service() {
}

::grpc::Status SceneLoad::Service::ValidateScene(::grpc::ServerContext* context, const ::ValidationRequest* request, ::ValidationReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SceneLoad::Service::LoadScene(::grpc::ServerContext* context, const ::SceneRequest* request, ::SceneReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


